syntax = "proto3";
package sunrise.liquidityincentive.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sunrise/liquidityincentive/v1/gauge.proto";
import "sunrise/liquidityincentive/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/liquidityincentive/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // VoteGauge
  rpc VoteGauge(MsgVoteGauge) returns (MsgVoteGaugeResponse);
  // CollectVoteRewards
  rpc CollectVoteRewards(MsgCollectVoteRewards) returns (MsgCollectVoteRewardsResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgVoteGauge
message MsgVoteGauge {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated PoolWeight pool_weights = 2 [(gogoproto.nullable) = false];
}

// MsgVoteGaugeResponse
message MsgVoteGaugeResponse {}

// MsgCollectVoteRewards
message MsgCollectVoteRewards {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCollectVoteRewardsResponse
message MsgCollectVoteRewardsResponse {}
