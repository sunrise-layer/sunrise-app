syntax = "proto3";
package sunrise.accounts.self_delegatable_lockup.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "sunrise/accounts/self_delegatable_lockup/v1/lockup.proto";

option go_package = "github.com/sunriselayer/sunrise/x/accounts/self_delegatable_lockup/v1";

// MsgInitSelfDelegatableLockupAccount defines a message that enables creating a self-delegatable lockup account.
message MsgInitSelfDelegatableLockupAccount {
  option (amino.name) = "cosmos-sdk/MsgInitLockupAccount";
  option (gogoproto.equal) = true;

  // owner of the vesting account
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // end_time is end of lockup
  google.protobuf.Timestamp end_time = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];
  // start_time is start of lockup
  google.protobuf.Timestamp start_time = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];
}

// MsgInitSelfDelegatableLockupAccountResponse defines the Msg/InitSelfDelegatableLockupAccount response type.
message MsgInitSelfDelegatableLockupAccountResponse {}

// MsgInitSelfDelegatablePeriodicLockingAccount defines a message that enables creating a self-delegatable periodic locking
// account.
message MsgInitSelfDelegatablePeriodicLockingAccount {
  option (amino.name) = "cosmos-sdk/MsgInitPeriodLockupAccount";
  option (gogoproto.equal) = false;

  // owner of the lockup account
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // start of lockup
  google.protobuf.Timestamp start_time = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];
  repeated Period locking_periods = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgInitSelfDelegatablePeriodicLockingAccountResponse defines the Msg/InitSelfDelegatablePeriodicLockingAccount
// response type.
message MsgInitSelfDelegatablePeriodicLockingAccountResponse {}

// MsgSelfDelegate
message MsgSelfDelegate {
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Amount of fee denom
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgSelfDelegateResponse
message MsgSelfDelegateResponse {}

// MsgWithdrawSelfDelegationUnbonded
message MsgWithdrawSelfDelegationUnbonded {
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Amount of bond denom
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgWithdrawSelfDelegationUnbondedResponse
message MsgWithdrawSelfDelegationUnbondedResponse {}

// MsgSend defines a message that enable lockup account to execute send message
message MsgSend {
  option (cosmos.msg.v1.signer) = "sender";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string to_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgExecuteMessagesResponse defines the response for lockup execute operations
message MsgExecuteMessagesResponse {
  repeated google.protobuf.Any responses = 1;
}
