syntax = "proto3";
package sunrise.da.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sunrise/da/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/da/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // PublishData
  rpc PublishData(MsgPublishData) returns (MsgPublishDataResponse);
  // ChallengeForFraud
  rpc ChallengeForFraud(MsgChallengeForFraud) returns (MsgChallengeForFraudResponse);
  // SubmitProof
  rpc SubmitProof(MsgSubmitProof) returns (MsgSubmitProofResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "sunrise/x/da/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgPublishData
message MsgPublishData {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string metadata_uri = 2;
  uint64 parity_shard_count = 3;
  repeated bytes shard_double_hashes = 4;
  string data_source_info = 5;
}

// MsgPublishDataResponse
message MsgPublishDataResponse {}

// MsgChallengeForFraud
message MsgChallengeForFraud {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string metadata_uri = 2;
}

// MsgChallengeForFraudResponse
message MsgChallengeForFraudResponse {}

// MsgSubmitProof
message MsgSubmitProof {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string metadata_uri = 2;
  repeated int64 indices = 3;
  repeated bytes proofs = 4;
  bool is_valid_data = 5;
}

// MsgSubmitProofResponse
message MsgSubmitProofResponse {}
