syntax = "proto3";
package sunrise.da.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "sunrise/da/v1/params.proto";
import "sunrise/da/v1/published_data.proto";

option go_package = "github.com/sunriselayer/sunrise/x/da/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/v1/da/params";
  }
  // PublishedData queries published data
  rpc PublishedData(QueryPublishedDataRequest) returns (QueryPublishedDataResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/v1/da/published-data";
  }
  // AllPublishedData queries published data
  rpc AllPublishedData(QueryAllPublishedDataRequest) returns (QueryAllPublishedDataResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/v1/da/all-published-data";
  }
  // ZkpProofThreshold
  rpc ZkpProofThreshold(QueryZkpProofThresholdRequest) returns (QueryZkpProofThresholdResponse) {
    option (google.api.http).get = "/sunriselayer/sunrise/v1/da/zkp-proof-threshold";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryPublishedDataRequest is request type for the Query/PublishedData RPC
// method.
message QueryPublishedDataRequest {
  string metadata_uri = 1;
}

// QueryPublishedDataResponse is response type for the Query/PublishedData RPC
// method.
message QueryPublishedDataResponse {
  PublishedData data = 1 [(gogoproto.nullable) = false];
}

// QueryAllPublishedDataRequest is request type for the
// Query/AllPublishedData RPC method.
message QueryAllPublishedDataRequest {}

// QueryAllPublishedDataResponse is response type for the
// Query/AllPublishedData RPC method.
message QueryAllPublishedDataResponse {
  repeated PublishedData data = 1 [(gogoproto.nullable) = false];
}

// QueryZkpProofThresholdRequest is request type for the
// Query/ZkpProofThreshold RPC method.
message QueryZkpProofThresholdRequest {
  uint64 shard_count = 1;
}

// QueryZkpProofThresholdResponse is response type for the
// Query/ZkpProofThreshold RPC method.
message QueryZkpProofThresholdResponse {
  uint64 threshold = 2;
}
