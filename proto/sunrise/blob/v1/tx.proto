syntax = "proto3";

package sunrise.blob.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sunrise/blob/v1/params.proto";

option go_package = "github.com/sunriselayer/sunrise/x/blob/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc PayForBlobs(MsgPayForBlobs) returns (MsgPayForBlobsResponse);
  rpc PublishData(MsgPublishData) returns (MsgPublishDataResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "sunrise/x/blob/v1/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgPayForBlobs pays for the inclusion of a blob in the block.
message MsgPayForBlobs {
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the bech32 encoded signer address. See
  // https://en.bitcoin.it/wiki/Bech32.
  string signer = 1;
  // namespaces is a list of namespaces that the blobs are associated with. A
  // namespace is a byte slice of length 29 where the first byte is the
  // namespaceVersion and the subsequent 28 bytes are the namespaceId.
  repeated bytes namespaces = 2;
  // blob_sizes is a list of blob sizes (one per blob). Each size is in bytes.
  repeated uint32 blob_sizes = 3;
  // share_commitments is a list of share commitments (one per blob).
  repeated bytes share_commitments = 4;
  // share_versions are the versions of the share format that the blobs
  // associated with this message should use when included in a block. The
  // share_versions specified must match the share_versions used to generate the
  // share_commitment in this message.
  repeated uint32 share_versions = 8;
}

// MsgPayForBlobsResponse describes the response returned after the submission
// of a PayForBlobs
message MsgPayForBlobsResponse {}

message MsgPublishData {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  bytes recovered_data_hash = 2;
  string metadata_uri = 3;
  repeated bytes shard_double_hashes = 4;
}
message MsgPublishDataResponse {}
