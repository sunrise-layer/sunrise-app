// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/da/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgPublishData
type MsgPublishData struct {
	Sender            string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MetadataUri       string   `protobuf:"bytes,2,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	ParityShardCount  uint64   `protobuf:"varint,3,opt,name=parity_shard_count,json=parityShardCount,proto3" json:"parity_shard_count,omitempty"`
	ShardDoubleHashes [][]byte `protobuf:"bytes,4,rep,name=shard_double_hashes,json=shardDoubleHashes,proto3" json:"shard_double_hashes,omitempty"`
	DataSourceInfo    string   `protobuf:"bytes,5,opt,name=data_source_info,json=dataSourceInfo,proto3" json:"data_source_info,omitempty"`
}

func (m *MsgPublishData) Reset()         { *m = MsgPublishData{} }
func (m *MsgPublishData) String() string { return proto.CompactTextString(m) }
func (*MsgPublishData) ProtoMessage()    {}
func (*MsgPublishData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{2}
}
func (m *MsgPublishData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishData.Merge(m, src)
}
func (m *MsgPublishData) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishData proto.InternalMessageInfo

func (m *MsgPublishData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgPublishData) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *MsgPublishData) GetParityShardCount() uint64 {
	if m != nil {
		return m.ParityShardCount
	}
	return 0
}

func (m *MsgPublishData) GetShardDoubleHashes() [][]byte {
	if m != nil {
		return m.ShardDoubleHashes
	}
	return nil
}

func (m *MsgPublishData) GetDataSourceInfo() string {
	if m != nil {
		return m.DataSourceInfo
	}
	return ""
}

// MsgPublishDataResponse
type MsgPublishDataResponse struct {
}

func (m *MsgPublishDataResponse) Reset()         { *m = MsgPublishDataResponse{} }
func (m *MsgPublishDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPublishDataResponse) ProtoMessage()    {}
func (*MsgPublishDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{3}
}
func (m *MsgPublishDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishDataResponse.Merge(m, src)
}
func (m *MsgPublishDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishDataResponse proto.InternalMessageInfo

// MsgChallengeForFraud
type MsgChallengeForFraud struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MetadataUri string `protobuf:"bytes,2,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
}

func (m *MsgChallengeForFraud) Reset()         { *m = MsgChallengeForFraud{} }
func (m *MsgChallengeForFraud) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeForFraud) ProtoMessage()    {}
func (*MsgChallengeForFraud) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{4}
}
func (m *MsgChallengeForFraud) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeForFraud) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeForFraud.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeForFraud) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeForFraud.Merge(m, src)
}
func (m *MsgChallengeForFraud) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeForFraud) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeForFraud.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeForFraud proto.InternalMessageInfo

func (m *MsgChallengeForFraud) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgChallengeForFraud) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

// MsgChallengeForFraudResponse
type MsgChallengeForFraudResponse struct {
}

func (m *MsgChallengeForFraudResponse) Reset()         { *m = MsgChallengeForFraudResponse{} }
func (m *MsgChallengeForFraudResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeForFraudResponse) ProtoMessage()    {}
func (*MsgChallengeForFraudResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{5}
}
func (m *MsgChallengeForFraudResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeForFraudResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeForFraudResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeForFraudResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeForFraudResponse.Merge(m, src)
}
func (m *MsgChallengeForFraudResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeForFraudResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeForFraudResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeForFraudResponse proto.InternalMessageInfo

// MsgSubmitProof
type MsgSubmitProof struct {
	Sender      string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MetadataUri string   `protobuf:"bytes,2,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	Indices     []int64  `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Proofs      [][]byte `protobuf:"bytes,4,rep,name=proofs,proto3" json:"proofs,omitempty"`
	IsValidData bool     `protobuf:"varint,5,opt,name=is_valid_data,json=isValidData,proto3" json:"is_valid_data,omitempty"`
}

func (m *MsgSubmitProof) Reset()         { *m = MsgSubmitProof{} }
func (m *MsgSubmitProof) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProof) ProtoMessage()    {}
func (*MsgSubmitProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{6}
}
func (m *MsgSubmitProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProof.Merge(m, src)
}
func (m *MsgSubmitProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProof proto.InternalMessageInfo

func (m *MsgSubmitProof) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitProof) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *MsgSubmitProof) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *MsgSubmitProof) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *MsgSubmitProof) GetIsValidData() bool {
	if m != nil {
		return m.IsValidData
	}
	return false
}

// MsgSubmitProofResponse
type MsgSubmitProofResponse struct {
}

func (m *MsgSubmitProofResponse) Reset()         { *m = MsgSubmitProofResponse{} }
func (m *MsgSubmitProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofResponse) ProtoMessage()    {}
func (*MsgSubmitProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8776d5690e46d2ba, []int{7}
}
func (m *MsgSubmitProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofResponse.Merge(m, src)
}
func (m *MsgSubmitProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "sunrise.da.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "sunrise.da.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgPublishData)(nil), "sunrise.da.v1.MsgPublishData")
	proto.RegisterType((*MsgPublishDataResponse)(nil), "sunrise.da.v1.MsgPublishDataResponse")
	proto.RegisterType((*MsgChallengeForFraud)(nil), "sunrise.da.v1.MsgChallengeForFraud")
	proto.RegisterType((*MsgChallengeForFraudResponse)(nil), "sunrise.da.v1.MsgChallengeForFraudResponse")
	proto.RegisterType((*MsgSubmitProof)(nil), "sunrise.da.v1.MsgSubmitProof")
	proto.RegisterType((*MsgSubmitProofResponse)(nil), "sunrise.da.v1.MsgSubmitProofResponse")
}

func init() { proto.RegisterFile("sunrise/da/v1/tx.proto", fileDescriptor_8776d5690e46d2ba) }

var fileDescriptor_8776d5690e46d2ba = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0xdf, 0xb2, 0xb0, 0xba, 0xb3, 0x80, 0x30, 0x22, 0x94, 0x06, 0xeb, 0xba, 0x46, 0xb3, 0x59,
	0xb5, 0x15, 0x4c, 0x8c, 0xe1, 0x26, 0x10, 0xa2, 0x87, 0x4d, 0x48, 0x37, 0x70, 0xf0, 0xd2, 0xcc,
	0x6e, 0x87, 0x76, 0x92, 0x6d, 0xa7, 0x99, 0x37, 0x25, 0x70, 0x33, 0x1e, 0x3d, 0xf9, 0x31, 0x3c,
	0x72, 0xe0, 0x43, 0x70, 0x24, 0x9e, 0x3c, 0x19, 0x03, 0x07, 0x3e, 0x81, 0x17, 0x4f, 0x66, 0xda,
	0x2e, 0xec, 0xbf, 0xa0, 0x17, 0x2e, 0x4d, 0xdf, 0xef, 0xf7, 0xfe, 0xfc, 0xde, 0x7b, 0x33, 0x83,
	0x16, 0x21, 0x89, 0x04, 0x03, 0x6a, 0x7b, 0xc4, 0x3e, 0x58, 0xb5, 0xe5, 0xa1, 0x15, 0x0b, 0x2e,
	0x39, 0x9e, 0xc9, 0x71, 0xcb, 0x23, 0xd6, 0xc1, 0xaa, 0x31, 0x4f, 0x42, 0x16, 0x71, 0x3b, 0xfd,
	0x66, 0x1e, 0xc6, 0x52, 0x87, 0x43, 0xc8, 0xc1, 0x0e, 0xc1, 0x57, 0x91, 0x21, 0xf8, 0x39, 0xb1,
	0x9c, 0x11, 0x6e, 0x6a, 0xd9, 0x99, 0x91, 0x53, 0x0b, 0x3e, 0xf7, 0x79, 0x86, 0xab, 0xbf, 0x1c,
	0x35, 0x06, 0x35, 0xc4, 0x44, 0x90, 0x30, 0x8f, 0xa8, 0x9d, 0x68, 0xe8, 0x5e, 0x13, 0xfc, 0xdd,
	0xd8, 0x23, 0x92, 0xee, 0xa4, 0x0c, 0x7e, 0x83, 0xca, 0x24, 0x91, 0x01, 0x17, 0x4c, 0x1e, 0xe9,
	0x5a, 0x55, 0xab, 0x97, 0x37, 0xf4, 0xef, 0x27, 0x2f, 0x17, 0xf2, 0x52, 0xef, 0x3c, 0x4f, 0x50,
	0x80, 0x96, 0x14, 0x2c, 0xf2, 0x9d, 0x6b, 0x57, 0xfc, 0x16, 0x95, 0xb2, 0xdc, 0xfa, 0x44, 0x55,
	0xab, 0x57, 0xd6, 0x1e, 0x58, 0x03, 0x4d, 0x5a, 0x59, 0xfa, 0x8d, 0xf2, 0xe9, 0xcf, 0x47, 0x85,
	0x6f, 0x97, 0xc7, 0x0d, 0xcd, 0xc9, 0xfd, 0xd7, 0xed, 0xcf, 0x97, 0xc7, 0x8d, 0xeb, 0x4c, 0x5f,
	0x2e, 0x8f, 0x1b, 0x2b, 0x3d, 0xd1, 0x87, 0x4a, 0xf6, 0x90, 0xc4, 0xda, 0x32, 0x5a, 0x1a, 0x82,
	0x1c, 0x0a, 0x31, 0x8f, 0x80, 0xd6, 0xfe, 0x68, 0x68, 0xb6, 0x09, 0xfe, 0x4e, 0xd2, 0xee, 0x32,
	0x08, 0xb6, 0x88, 0x24, 0xf8, 0x15, 0x2a, 0x01, 0x8d, 0x3c, 0x2a, 0xfe, 0xd9, 0x4d, 0xee, 0x87,
	0x1f, 0xa3, 0xe9, 0x90, 0x4a, 0xe2, 0x11, 0x49, 0xdc, 0x44, 0xb0, 0xb4, 0xa1, 0xb2, 0x53, 0xe9,
	0x61, 0xbb, 0x82, 0xe1, 0x17, 0x08, 0xc7, 0x44, 0xa9, 0x75, 0x21, 0x20, 0xc2, 0x73, 0x3b, 0x3c,
	0x89, 0xa4, 0x5e, 0xac, 0x6a, 0xf5, 0x49, 0x67, 0x2e, 0x63, 0x5a, 0x8a, 0xd8, 0x54, 0x38, 0xb6,
	0xd0, 0xfd, 0xcc, 0xcd, 0xe3, 0x49, 0xbb, 0x4b, 0xdd, 0x80, 0x40, 0x40, 0x41, 0x9f, 0xac, 0x16,
	0xeb, 0xd3, 0xce, 0x7c, 0x4a, 0x6d, 0xa5, 0xcc, 0xfb, 0x94, 0xc0, 0x75, 0x34, 0x97, 0x16, 0x07,
	0x9e, 0x88, 0x0e, 0x75, 0x59, 0xb4, 0xcf, 0xf5, 0xa9, 0x54, 0xc4, 0xac, 0xc2, 0x5b, 0x29, 0xfc,
	0x21, 0xda, 0xe7, 0xeb, 0x15, 0x35, 0xbb, 0x5c, 0x77, 0x4d, 0x47, 0x8b, 0x83, 0xbd, 0x5f, 0x8d,
	0xe5, 0x10, 0x2d, 0x34, 0xc1, 0xdf, 0x0c, 0x48, 0xb7, 0x4b, 0x23, 0x9f, 0x6e, 0x73, 0xb1, 0x2d,
	0x48, 0xe2, 0xdd, 0xca, 0x6c, 0x06, 0x35, 0x99, 0x68, 0x65, 0x5c, 0xe5, 0x2b, 0x65, 0xa7, 0xd9,
	0xc2, 0x5a, 0x49, 0x3b, 0x64, 0x72, 0x47, 0x70, 0xbe, 0x7f, 0x3b, 0x0b, 0xd3, 0xd1, 0x1d, 0x16,
	0x79, 0xac, 0x43, 0x41, 0x2f, 0x56, 0x8b, 0xf5, 0xa2, 0xd3, 0x33, 0xf1, 0x22, 0x2a, 0xc5, 0xaa,
	0x6e, 0x6f, 0x1f, 0xb9, 0x85, 0x6b, 0x68, 0x86, 0x81, 0x7b, 0x40, 0xba, 0xcc, 0x73, 0x55, 0x96,
	0x74, 0x03, 0x77, 0x9d, 0x0a, 0x83, 0x3d, 0x85, 0xa9, 0xf9, 0x8e, 0x1b, 0x7f, 0x5f, 0x27, 0xbd,
	0x26, 0xd7, 0x7e, 0x4f, 0xa0, 0x62, 0x13, 0x7c, 0xbc, 0x87, 0xa6, 0x07, 0xee, 0x9a, 0x39, 0x74,
	0x47, 0x86, 0x4e, 0xb5, 0xf1, 0xec, 0x66, 0xbe, 0x97, 0x1f, 0xb7, 0x50, 0xa5, 0xff, 0xc4, 0x3f,
	0x1c, 0x0d, 0xeb, 0xa3, 0x8d, 0xa7, 0x37, 0xd2, 0x57, 0x49, 0x29, 0x9a, 0x1f, 0x3d, 0x30, 0x4f,
	0x46, 0x63, 0x47, 0x9c, 0x8c, 0xe7, 0xff, 0xe1, 0xd4, 0xaf, 0xbd, 0x7f, 0xf9, 0x63, 0xb4, 0xf7,
	0xd1, 0xe3, 0xb4, 0x8f, 0x19, 0xb8, 0x31, 0xf5, 0x49, 0xbd, 0x30, 0x1b, 0x5b, 0xa7, 0xe7, 0xa6,
	0x76, 0x76, 0x6e, 0x6a, 0xbf, 0xce, 0x4d, 0xed, 0xeb, 0x85, 0x59, 0x38, 0xbb, 0x30, 0x0b, 0x3f,
	0x2e, 0xcc, 0xc2, 0xc7, 0x86, 0xcf, 0x64, 0x90, 0xb4, 0xad, 0x0e, 0x0f, 0xed, 0x3c, 0x63, 0x97,
	0x1c, 0x51, 0x61, 0x0f, 0x3c, 0x3c, 0xf2, 0x28, 0xa6, 0xd0, 0x2e, 0xa5, 0x8f, 0xe5, 0xeb, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x9d, 0x5c, 0x10, 0xce, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// PublishData
	PublishData(ctx context.Context, in *MsgPublishData, opts ...grpc.CallOption) (*MsgPublishDataResponse, error)
	// ChallengeForFraud
	ChallengeForFraud(ctx context.Context, in *MsgChallengeForFraud, opts ...grpc.CallOption) (*MsgChallengeForFraudResponse, error)
	// SubmitProof
	SubmitProof(ctx context.Context, in *MsgSubmitProof, opts ...grpc.CallOption) (*MsgSubmitProofResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PublishData(ctx context.Context, in *MsgPublishData, opts ...grpc.CallOption) (*MsgPublishDataResponse, error) {
	out := new(MsgPublishDataResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v1.Msg/PublishData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChallengeForFraud(ctx context.Context, in *MsgChallengeForFraud, opts ...grpc.CallOption) (*MsgChallengeForFraudResponse, error) {
	out := new(MsgChallengeForFraudResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v1.Msg/ChallengeForFraud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitProof(ctx context.Context, in *MsgSubmitProof, opts ...grpc.CallOption) (*MsgSubmitProofResponse, error) {
	out := new(MsgSubmitProofResponse)
	err := c.cc.Invoke(ctx, "/sunrise.da.v1.Msg/SubmitProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// PublishData
	PublishData(context.Context, *MsgPublishData) (*MsgPublishDataResponse, error)
	// ChallengeForFraud
	ChallengeForFraud(context.Context, *MsgChallengeForFraud) (*MsgChallengeForFraudResponse, error)
	// SubmitProof
	SubmitProof(context.Context, *MsgSubmitProof) (*MsgSubmitProofResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) PublishData(ctx context.Context, req *MsgPublishData) (*MsgPublishDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishData not implemented")
}
func (*UnimplementedMsgServer) ChallengeForFraud(ctx context.Context, req *MsgChallengeForFraud) (*MsgChallengeForFraudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeForFraud not implemented")
}
func (*UnimplementedMsgServer) SubmitProof(ctx context.Context, req *MsgSubmitProof) (*MsgSubmitProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProof not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PublishData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublishData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PublishData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v1.Msg/PublishData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PublishData(ctx, req.(*MsgPublishData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChallengeForFraud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChallengeForFraud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChallengeForFraud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v1.Msg/ChallengeForFraud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChallengeForFraud(ctx, req.(*MsgChallengeForFraud))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sunrise.da.v1.Msg/SubmitProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProof(ctx, req.(*MsgSubmitProof))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sunrise.da.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "PublishData",
			Handler:    _Msg_PublishData_Handler,
		},
		{
			MethodName: "ChallengeForFraud",
			Handler:    _Msg_ChallengeForFraud_Handler,
		},
		{
			MethodName: "SubmitProof",
			Handler:    _Msg_SubmitProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunrise/da/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPublishData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataSourceInfo) > 0 {
		i -= len(m.DataSourceInfo)
		copy(dAtA[i:], m.DataSourceInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DataSourceInfo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ShardDoubleHashes) > 0 {
		for iNdEx := len(m.ShardDoubleHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShardDoubleHashes[iNdEx])
			copy(dAtA[i:], m.ShardDoubleHashes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ShardDoubleHashes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ParityShardCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ParityShardCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPublishDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChallengeForFraud) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeForFraud) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeForFraud) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChallengeForFraudResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeForFraudResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeForFraudResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsValidData {
		i--
		if m.IsValidData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proofs[iNdEx])
			copy(dAtA[i:], m.Proofs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Proofs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Indices) > 0 {
		dAtA3 := make([]byte, len(m.Indices)*10)
		var j2 int
		for _, num1 := range m.Indices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPublishData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ParityShardCount != 0 {
		n += 1 + sovTx(uint64(m.ParityShardCount))
	}
	if len(m.ShardDoubleHashes) > 0 {
		for _, b := range m.ShardDoubleHashes {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.DataSourceInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPublishDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChallengeForFraud) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChallengeForFraudResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Indices) > 0 {
		l = 0
		for _, e := range m.Indices {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Proofs) > 0 {
		for _, b := range m.Proofs {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.IsValidData {
		n += 2
	}
	return n
}

func (m *MsgSubmitProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParityShardCount", wireType)
			}
			m.ParityShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParityShardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardDoubleHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardDoubleHashes = append(m.ShardDoubleHashes, make([]byte, postIndex-iNdEx))
			copy(m.ShardDoubleHashes[len(m.ShardDoubleHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeForFraud) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeForFraud: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeForFraud: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeForFraudResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeForFraudResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeForFraudResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indices = append(m.Indices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indices) == 0 {
					m.Indices = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indices = append(m.Indices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, make([]byte, postIndex-iNdEx))
			copy(m.Proofs[len(m.Proofs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidData = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
