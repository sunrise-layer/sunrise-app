package types

// DONTCOVER

import (
	"cosmossdk.io/errors/v2"
)

// x/liquiditypool module sentinel errors
var (
	ErrInvalidSigner            = errors.Register(ModuleName, 1100, "expected gov account as only signer for proposal message")
	ErrPoolNotFound             = errors.Register(ModuleName, 1101, "pool not found")
	ErrInvalidBaseDenom         = errors.Register(ModuleName, 1102, "invalid base denom")
	ErrInvalidQuoteDenom        = errors.Register(ModuleName, 1103, "invalid quote denom")
	ErrInvalidTokenAmounts      = errors.Register(ModuleName, 1104, "invalid token amounts")
	ErrInvalidTickers           = errors.Register(ModuleName, 1105, "invalid tickers")
	ErrNegativeTokenAmount      = errors.Register(ModuleName, 1106, "negative token amount")
	ErrSqrtPriceToTick          = errors.Register(ModuleName, 1107, "error converting sqrt price to tick")
	ErrPriceOutOfBound          = errors.Register(ModuleName, 1108, "price out of bound")
	ErrZeroLiquidity            = errors.Register(ModuleName, 1109, "zero liquidity")
	ErrInsufficientAmountPut    = errors.Register(ModuleName, 1110, "insufficient amount of tokens were put")
	ErrInvalidFirstPosition     = errors.Register(ModuleName, 1111, "invalid first position")
	ErrPositionNotFound         = errors.Register(ModuleName, 1112, "position not found")
	ErrInsufficientLiquidity    = errors.Register(ModuleName, 1113, "insufficient liquidity")
	ErrNextTickInfoNil          = errors.Register(ModuleName, 1114, "next tick info cannot be nil")
	ErrNegativeLiquidity        = errors.Register(ModuleName, 1115, "negative liquidity")
	ErrEmptyLiquidity           = errors.Register(ModuleName, 1116, "empty liquidity")
	ErrDenomDuplication         = errors.Register(ModuleName, 1117, "in and out denom duplication")
	ErrLessThanMinAmount        = errors.Register(ModuleName, 1118, "less than minimum amount")
	ErrGreaterThanMaxAmount     = errors.Register(ModuleName, 1119, "greater than maximum amount")
	ErrUnexpectedCalcAmount     = errors.Register(ModuleName, 1120, "unexpected calculated amount")
	ErrRanOutOfTicks            = errors.Register(ModuleName, 1121, "ran out of ticks")
	ErrRanOutOfIterations       = errors.Register(ModuleName, 1122, "ran out of iterations during swap")
	ErrInvalidInDenom           = errors.Register(ModuleName, 1123, "invalid in denom")
	ErrInvalidOutDenom          = errors.Register(ModuleName, 1124, "invalid out denom")
	ErrInvalidComputedSqrtPrice = errors.Register(ModuleName, 1125, "invalid computed sqrt price")
	ErrInvalidTickIndexEncoding = errors.Register(ModuleName, 1126, "invalid tick index encoding")
	ErrOverChargeGivenIn        = errors.Register(ModuleName, 1127, "over charge swap out given in")
	ErrNegativeSqrtPrice        = errors.Register(ModuleName, 1128, "negative sqrt price")
	ErrTickIndexOutOfBoundaries = errors.Register(ModuleName, 1129, "tickIndex out of boundaries")
	ErrNotEqualSqrtPrice        = errors.Register(ModuleName, 1130, "not equal computed sqrt price")
	ErrNoSqrtPriceAfterSwap     = errors.Register(ModuleName, 1131, "no advance sqrt price after swap")
	ErrInvalidSqrtPrice         = errors.Register(ModuleName, 1132, "invalid sqrt price")
	ErrFeePositionNotFound      = errors.Register(ModuleName, 1133, "fee position not found")
	ErrNotPositionOwner         = errors.Register(ModuleName, 1134, "not a position owner")
	ErrNonPositiveLiquidity     = errors.Register(ModuleName, 1135, "non-positive liquidity")
	ErrNoPosition               = errors.Register(ModuleName, 1136, "no position found for position key")
	ErrZeroShares               = errors.Register(ModuleName, 1137, "zero shares")
	ErrAccumDoesNotExist        = errors.Register(ModuleName, 1138, "accumulator does not exist")
	ErrNegRewardAddition        = errors.Register(ModuleName, 1139, "negative reward addition")
	ErrTickNotFound             = errors.Register(ModuleName, 1140, "tick not found")
	ErrZeroActualAmountBase     = errors.Register(ModuleName, 1141, "zero actual amount base")
	ErrZeroActualAmountQuote    = errors.Register(ModuleName, 1142, "zero actual amount quote")
)
